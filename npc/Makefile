-include ../Makefile

CPU      ?= single
CPU_LIST := single pipeline multip

CPU_BLACKLIST = $(filter-out $(CPU), $(CPU_LIST))

# Sanity check
ifeq ($(wildcard $(NPC_HOME)/sim/main.c),)
    $(error NPC_HOME=$(NPC_HOME) is not a NPC repo)
endif

# Include variables and rules generated by menuconfig
-include $(NPC_HOME)/include/config/auto.conf
-include $(NPC_HOME)/include/config/auto.conf.cmd

export PATH := $(PATH):$(abspath ./utils)

remove_quote = $(patsubst "%",%,$(1))

CFG_CFLAGS_TOP_NAME   = TOP
CFG_GUEST_ISA ?= $(call remove_quote, $(CONFIG_ISA))
CFG_ENGINE    ?= $(call remove_quote, $(CONFIG_ENGINE))

BUILD_DIR = $(NPC_HOME)/build
DIR_OBJ   = $(BUILD_DIR)/obj_dir

NPC_BIN_NAME = $(CFG_GUEST_ISA)-npc-$(CFG_ENGINE)
NPC_BIN      = $(BUILD_DIR)/$(NPC_BIN_NAME)

VERILATOR         = verilator
VERILATOR_CFLAGS += -MMD --build -cc                                \
                    -O3 --x-assign fast --x-initial fast --noassert \
                    --trace                                         \

INCS_DIR = $(NPC_HOME)/include           \
					 $(NPC_HOME)/include/generated \

INCS     = $(shell find $(INCS_DIR) -name "*.h")
INCFLAGS = $(addprefix -I, $(INCS_DIR))

CFLAGS_BUILD += $(call remove_quote, $(CONFIG_CC_OPT))
CFLAGS_BUILD += $(if $(CONFIG_CC_LTO), -flto,)
CFLAGS_BUILD += $(if $(CONFIG_CC_DEBUG), -Og -ggdb3,)
CFLAGS_BUILD += $(if $(CONFIG_CC_ASAN), -fsanitize=address,)
CFLAGS_BUILD += -DCFLAGS_CPU_TYPE=$(CPU)

CFLAGS       += $(CFLAGS_BUILD)                                 \
                -DCFLAGS_GUEST_ISA=$(CFG_GUEST_ISA)             \
                -Wno-unused-result                              \
                -DCFLAGS_TOP_NAME="\"V$(CFG_CFLAGS_TOP_NAME)\"" \
                $(INCFLAGS)                                     \
                $(shell llvm-config-11 --cxxflags) -fPIE

LDFLAGS += $(CFLAGS_BUILD)                \
           -lreadline -ldl -pie           \
           $(shell llvm-config-11 --libs) \
           -lSDL2

SRCSS_DIR           = $(abspath $(NPC_HOME)/cpu/src)
SRCSS_SRC_BLACKLIST =
# SRCSS_DIR_BLACKLIST = $(addprefix $(SRCSS_DIR)/stage/, $(CPU_BLACKLIST))
SRCSS_BLACKLIST     = $(SRCSS_SRC_BLACKLIST)                               \
                      # $(shell find $(SRCSS_DIR_BLACKLIST) -name "*.scala")
SRCSS_WHITELIST     = $(shell find $(SRCSS_DIR) -name "*.scala")
SRCSS               = $(filter-out $(SRCSS_BLACKLIST), $(SRCSS_WHITELIST))

SRCVS_GEN = $(BUILD_DIR)/$(CFG_CFLAGS_TOP_NAME).v
# SRCVS_DIR = $(abspath $(NPC_HOME)/cpu/srcv)
# SRCVS     = $(shell find $(SRCVS_DIR) -name "*.v")

SRCCS_DIR += $(NPC_HOME)/sim             \
             $(NPC_HOME)/sim/cpu         \
             $(NPC_HOME)/sim/isa         \
             $(NPC_HOME)/sim/memory      \
             $(NPC_HOME)/sim/monitor     \
             $(NPC_HOME)/sim/monitor/sdb \
             $(NPC_HOME)/sim/utils
SRCCS_SRC_BLACKLIST =
SRCCS_DIR_BLACKLIST =
SRCCS_BLACKLIST     = $(SRCCS_SRC_BLACKLIST)                               \
                      $(shell find $(SRCCS_DIR_BLACKLIST) -name "*.c")
SRCCS_WHITELIST     = $(shell find $(SRCCS_DIR) -name "*.c")
SRCCS               = $(filter-out $(SRCCS_BLACKLIST), $(SRCCS_WHITELIST)) \
                      $(NPC_HOME)/sim/utils/disasm.cc

SRCS = $(SRCVS_GEN) $(SRCCS)

CONFIG = $(NPC_HOME)/.config

$(SRCVS_GEN): $(SRCSS)
	$(call git_commit, "generate verilog")
	mkdir -p $(BUILD_DIR)                           
	mill -i __.test.runMain Elaborate --target-dir $(BUILD_DIR)

$(NPC_BIN): $(INCS) $(SRCS) $(CONFIG)
	@rm -rf $(DIR_OBJ)
	$(VERILATOR) $(VERILATOR_CFLAGS)            \
	--top-module $(CFG_CFLAGS_TOP_NAME) $(SRCS) \
	$(addprefix -CFLAGS ,  $(CFLAGS))           \
	$(addprefix -LDFLAGS , $(LDFLAGS))          \
	--Mdir $(DIR_OBJ) --exe -o                  \
	$(abspath $(NPC_BIN))

ifdef CONFIG_DIFFTEST
    ARGS_EMBED_DIFF = --diff=$(Nsim_HOME)/build/riscv32-nsim-interpreter-so
endif

# override ARGS_EMBED ?= --log=$(BUILD_DIR)/npc-log.txt
override ARGS_EMBED += $(ARGS_EMBED_DIFF)

IMG ?=
NPC_EXEC := $(NPC_BIN) $(ARGS_EMBED) $(ARGS) $(IMG)

.PHONY: test gen run gdb sim reformat checkformat clean

config:
	cd sim && make menuconfig

gen: $(SRCVS_GEN)
	@echo "success"

run: $(NPC_BIN)
	@echo "test"
	$(call git_commit, "run NPC")
	rm -rf $(DIR_BUILD)/wave.vcd
	$(NPC_EXEC)

gdb: $(NPC_BIN)
	$(call git_commit, "gdb NPC")
	rm -rf $(DIR_BUILD)/wave.vcd
	gdb -s $(NPC_BIN) --ARGS_EMBED $(NPC_EXEC)

clean:
	rm -rf out
	rm -rf $(BUILD_DIR)
	rm -rf cpu/test_run_dir
	
sim: $(NPC_BIN)
	$(call git_commit, "sim NPC")
	gtkwave $(BUILD_DIR)/wave.vcd
	@echo "success"

test:
	mill -i __.test

testecho:
	@echo "testecho" 

verilog:
	$(call git_commit, "generate verilog")
	mkdir -p $(BUILD_DIR)
	mill -i __.test.runMain Elaborate --target-dir $(BUILD_DIR)

help:
	mill -i __.test.runMain Elaborate --help

compile:
	mill -i __.compile

bsp:
	mill -i mill.bsp.BSP/install

reformat:
	mill -i __.reformat

checkformat:
	mill -i __.checkFormat
