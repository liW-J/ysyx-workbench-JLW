// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module instMem_combMem(	// @[cpu/src/unit/InstRom.scala:17:20]
  input  [9:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [9:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  input  [9:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [31:0] W1_data,
  output [31:0] R0_data
);

  reg [31:0] Memory[0:1023];	// @[cpu/src/unit/InstRom.scala:17:20]
  always @(posedge W0_clk) begin	// @[cpu/src/unit/InstRom.scala:17:20]
    if (W0_en)	// @[cpu/src/unit/InstRom.scala:17:20]
      Memory[W0_addr] <= W0_data;	// @[cpu/src/unit/InstRom.scala:17:20]
    if (W1_en)	// @[cpu/src/unit/InstRom.scala:17:20]
      Memory[W1_addr] <= W1_data;	// @[cpu/src/unit/InstRom.scala:17:20]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// @[cpu/src/unit/InstRom.scala:17:20]
    reg [31:0] _RANDOM_MEM;	// @[cpu/src/unit/InstRom.scala:17:20]
    initial begin	// @[cpu/src/unit/InstRom.scala:17:20]
      `INIT_RANDOM_PROLOG_	// @[cpu/src/unit/InstRom.scala:17:20]
      `ifdef RANDOMIZE_MEM_INIT	// @[cpu/src/unit/InstRom.scala:17:20]
        for (logic [10:0] i = 11'h0; i < 11'h400; i += 11'h1) begin
          _RANDOM_MEM = `RANDOM;	// @[cpu/src/unit/InstRom.scala:17:20]
          Memory[i[9:0]] = _RANDOM_MEM;	// @[cpu/src/unit/InstRom.scala:17:20]
        end	// @[cpu/src/unit/InstRom.scala:17:20]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// @[cpu/src/unit/InstRom.scala:17:20]
endmodule

module PCRegister(	// @[<stdin>:3:10]
  input         clock,	// @[<stdin>:4:11]
                reset,	// @[<stdin>:5:11]
  output [31:0] io_pc	// @[cpu/src/unit/PCRegister.scala:25:14]
);

  reg [31:0] pcReg;	// @[cpu/src/unit/PCRegister.scala:27:22]
  always @(posedge clock) begin	// @[<stdin>:4:11]
    if (reset)	// @[<stdin>:4:11]
      pcReg <= 32'h80000000;	// @[cpu/src/unit/PCRegister.scala:27:22]
    else	// @[<stdin>:4:11]
      pcReg <= pcReg + 32'h4;	// @[cpu/src/unit/PCRegister.scala:27:22, :32:20]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[<stdin>:3:10]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[<stdin>:3:10]
      `FIRRTL_BEFORE_INITIAL	// @[<stdin>:3:10]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// @[<stdin>:3:10]
    initial begin	// @[<stdin>:3:10]
      `ifdef INIT_RANDOM_PROLOG_	// @[<stdin>:3:10]
        `INIT_RANDOM_PROLOG_	// @[<stdin>:3:10]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[<stdin>:3:10]
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// @[<stdin>:3:10]
        pcReg = _RANDOM[/*Zero width*/ 1'b0];	// @[<stdin>:3:10, cpu/src/unit/PCRegister.scala:27:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[<stdin>:3:10]
      `FIRRTL_AFTER_INITIAL	// @[<stdin>:3:10]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_pc = pcReg;	// @[<stdin>:3:10, cpu/src/unit/PCRegister.scala:27:22]
endmodule

module InstRom(	// @[<stdin>:20:10]
  input         clock,	// @[<stdin>:21:11]
  input  [31:0] io_addr,	// @[cpu/src/unit/InstRom.scala:14:14]
  output [31:0] io_inst	// @[cpu/src/unit/InstRom.scala:14:14]
);

  instMem_combMem instMem_ext (	// @[cpu/src/unit/InstRom.scala:17:20]
    .R0_addr (io_addr[11:2]),	// @[cpu/src/unit/InstRom.scala:23:26]
    .R0_en   (1'h1),	// @[<stdin>:20:10]
    .R0_clk  (clock),
    .W0_addr (10'h1),	// @[cpu/src/unit/InstRom.scala:20:16]
    .W0_en   (1'h1),	// @[<stdin>:20:10]
    .W0_clk  (clock),
    .W0_data (32'hFE0F8F93),	// @[cpu/src/unit/InstRom.scala:20:16]
    .W1_addr (10'h2),	// @[cpu/src/unit/InstRom.scala:21:16]
    .W1_en   (1'h1),	// @[<stdin>:20:10]
    .W1_clk  (clock),
    .W1_data (32'h100073),	// @[cpu/src/unit/InstRom.scala:21:16]
    .R0_data (io_inst)
  );
endmodule

module ID(	// @[<stdin>:35:10]
  input         clock,	// @[<stdin>:36:11]
                reset,	// @[<stdin>:37:11]
  input  [31:0] io_inst,	// @[cpu/src/stage/ID.scala:30:14]
  output        io_BundleControl_isALUSrc,	// @[cpu/src/stage/ID.scala:30:14]
  output [3:0]  io_BundleControl_exeType,	// @[cpu/src/stage/ID.scala:30:14]
  output [31:0] io_imm	// @[cpu/src/stage/ID.scala:30:14]
);

  wire _GEN = io_inst[4:0] == 5'h1C;	// @[cpu/src/stage/ID.scala:46:{10,20}, :48:18]
  wire _GEN_0 = io_inst[4:0] == 5'h4;	// @[cpu/src/stage/ID.scala:46:{10,20}, :48:18]
  `ifndef SYNTHESIS	// @[cpu/src/stage/ID.scala:50:13]
    always @(posedge clock) begin	// @[cpu/src/stage/ID.scala:50:13]
      if ((`PRINTF_COND_) & _GEN & ~reset)	// @[cpu/src/stage/ID.scala:48:18, :50:13]
        $fwrite(32'h80000002, "ebreak");	// @[cpu/src/stage/ID.scala:50:13]
      if ((`PRINTF_COND_) & ~_GEN & _GEN_0 & ~reset)	// @[cpu/src/stage/ID.scala:48:18, :50:13, :53:13]
        $fwrite(32'h80000002, "addi");	// @[cpu/src/stage/ID.scala:50:13, :53:13]
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign io_BundleControl_isALUSrc = ~_GEN & _GEN_0;	// @[<stdin>:35:10, cpu/src/stage/ID.scala:39:94, :48:18]
  assign io_BundleControl_exeType = _GEN ? 4'h0 : {3'h0, _GEN_0};	// @[<stdin>:35:10, cpu/src/stage/ID.scala:43:28, :48:18, :55:16]
  assign io_imm = _GEN | ~_GEN_0 ? 32'h0 : {{20{io_inst[31]}}, io_inst[31:20]};	// @[<stdin>:35:10, cpu/src/stage/ID.scala:44:28, :48:18, cpu/src/utils/DecodeUtils.scala:11:{32,37,43,51}]
endmodule

module GPRFile(	// @[<stdin>:105:10]
  output [31:0] io_dataRead1,	// @[cpu/src/unit/GPRFile.scala:20:14]
                io_dataRead2	// @[cpu/src/unit/GPRFile.scala:20:14]
);

  assign io_dataRead1 = 32'h0;	// @[<stdin>:105:10, cpu/src/unit/GPRFile.scala:23:17]
  assign io_dataRead2 = 32'h0;	// @[<stdin>:105:10, cpu/src/unit/GPRFile.scala:23:17]
endmodule

module EX(	// @[<stdin>:134:10]
  input         io_bundleEXControl_isALUSrc,	// @[cpu/src/stage/EX.scala:31:16]
  input  [4:0]  io_bundleEXControl_exeType,	// @[cpu/src/stage/EX.scala:31:16]
  input  [31:0] io_dataRead1,	// @[cpu/src/stage/EX.scala:31:16]
                io_dataRead2,	// @[cpu/src/stage/EX.scala:31:16]
                io_imm,	// @[cpu/src/stage/EX.scala:31:16]
  output [31:0] io_res	// @[cpu/src/stage/EX.scala:31:16]
);

  assign io_res =
    io_bundleEXControl_exeType == 5'h1
      ? io_dataRead1 + (io_bundleEXControl_isALUSrc ? io_imm : io_dataRead2)
      : 32'h0;	// @[<stdin>:134:10, cpu/src/stage/EX.scala:35:26, :40:16, :42:40, :44:{17,25}]
endmodule

module DataRam(	// @[<stdin>:158:10]
  input  [31:0] io_resEX,	// @[cpu/src/unit/DataRam.scala:33:14]
  output [31:0] io_res	// @[cpu/src/unit/DataRam.scala:33:14]
);

  assign io_res = io_resEX;	// @[<stdin>:158:10]
endmodule

module Controller(	// @[<stdin>:233:10]
  input        io_bundleControlIn_isALUSrc,	// @[cpu/src/Controller.scala:15:16]
  input  [3:0] io_bundleControlIn_exeType,	// @[cpu/src/Controller.scala:15:16]
  output       io_bundleEXControl_isALUSrc,	// @[cpu/src/Controller.scala:15:16]
  output [4:0] io_bundleEXControl_exeType	// @[cpu/src/Controller.scala:15:16]
);

  assign io_bundleEXControl_isALUSrc = io_bundleControlIn_isALUSrc;	// @[<stdin>:233:10]
  assign io_bundleEXControl_exeType = {1'h0, io_bundleControlIn_exeType};	// @[<stdin>:233:10, cpu/src/Controller.scala:21:32]
endmodule

module TOP(	// @[<stdin>:249:10]
  input         clock,	// @[<stdin>:250:11]
                reset,	// @[<stdin>:251:11]
  output [31:0] io_pc,	// @[cpu/src/TOP.scala:26:16]
                io_inst,	// @[cpu/src/TOP.scala:26:16]
  output        io_bundleControl_isALUSrc,	// @[cpu/src/TOP.scala:26:16]
                io_bundleControl_isJump,	// @[cpu/src/TOP.scala:26:16]
                io_bundleControl_isBranch,	// @[cpu/src/TOP.scala:26:16]
                io_bundleControl_isJAL,	// @[cpu/src/TOP.scala:26:16]
                io_bundleControl_isLoad,	// @[cpu/src/TOP.scala:26:16]
                io_bundleControl_isStore,	// @[cpu/src/TOP.scala:26:16]
                io_bundleControl_isSigned,	// @[cpu/src/TOP.scala:26:16]
                io_bundleControl_writeEnable,	// @[cpu/src/TOP.scala:26:16]
  output [1:0]  io_bundleControl_lsType,	// @[cpu/src/TOP.scala:26:16]
  output [3:0]  io_bundleControl_exeType,	// @[cpu/src/TOP.scala:26:16]
  output [31:0] io_resEX,	// @[cpu/src/TOP.scala:26:16]
                io_rs1,	// @[cpu/src/TOP.scala:26:16]
                io_rs2,	// @[cpu/src/TOP.scala:26:16]
                io_imm,	// @[cpu/src/TOP.scala:26:16]
  output        io_resBranch,	// @[cpu/src/TOP.scala:26:16]
  output [31:0] io_resLoad	// @[cpu/src/TOP.scala:26:16]
);

  wire        _controller_io_bundleEXControl_isALUSrc;	// @[cpu/src/TOP.scala:34:28]
  wire [4:0]  _controller_io_bundleEXControl_exeType;	// @[cpu/src/TOP.scala:34:28]
  wire [31:0] _ex_io_res;	// @[cpu/src/TOP.scala:32:20]
  wire [31:0] _gprFile_io_dataRead1;	// @[cpu/src/TOP.scala:31:25]
  wire [31:0] _gprFile_io_dataRead2;	// @[cpu/src/TOP.scala:31:25]
  wire        _id_io_BundleControl_isALUSrc;	// @[cpu/src/TOP.scala:30:20]
  wire [3:0]  _id_io_BundleControl_exeType;	// @[cpu/src/TOP.scala:30:20]
  wire [31:0] _id_io_imm;	// @[cpu/src/TOP.scala:30:20]
  wire [31:0] _instRom_io_inst;	// @[cpu/src/TOP.scala:29:25]
  wire [31:0] _pcReg_io_pc;	// @[cpu/src/TOP.scala:28:23]
  PCRegister pcReg (	// @[cpu/src/TOP.scala:28:23]
    .clock (clock),
    .reset (reset),
    .io_pc (_pcReg_io_pc)
  );
  InstRom instRom (	// @[cpu/src/TOP.scala:29:25]
    .clock   (clock),
    .io_addr (_pcReg_io_pc),	// @[cpu/src/TOP.scala:28:23]
    .io_inst (_instRom_io_inst)
  );
  ID id (	// @[cpu/src/TOP.scala:30:20]
    .clock                     (clock),
    .reset                     (reset),
    .io_inst                   (_instRom_io_inst),	// @[cpu/src/TOP.scala:29:25]
    .io_BundleControl_isALUSrc (_id_io_BundleControl_isALUSrc),
    .io_BundleControl_exeType  (_id_io_BundleControl_exeType),
    .io_imm                    (_id_io_imm)
  );
  GPRFile gprFile (	// @[cpu/src/TOP.scala:31:25]
    .io_dataRead1 (_gprFile_io_dataRead1),
    .io_dataRead2 (_gprFile_io_dataRead2)
  );
  EX ex (	// @[cpu/src/TOP.scala:32:20]
    .io_bundleEXControl_isALUSrc (_controller_io_bundleEXControl_isALUSrc),	// @[cpu/src/TOP.scala:34:28]
    .io_bundleEXControl_exeType  (_controller_io_bundleEXControl_exeType),	// @[cpu/src/TOP.scala:34:28]
    .io_dataRead1                (_gprFile_io_dataRead1),	// @[cpu/src/TOP.scala:31:25]
    .io_dataRead2                (_gprFile_io_dataRead2),	// @[cpu/src/TOP.scala:31:25]
    .io_imm                      (_id_io_imm),	// @[cpu/src/TOP.scala:30:20]
    .io_res                      (_ex_io_res)
  );
  DataRam dataRam (	// @[cpu/src/TOP.scala:33:25]
    .io_resEX (_ex_io_res),	// @[cpu/src/TOP.scala:32:20]
    .io_res   (io_resLoad)
  );
  Controller controller (	// @[cpu/src/TOP.scala:34:28]
    .io_bundleControlIn_isALUSrc (_id_io_BundleControl_isALUSrc),	// @[cpu/src/TOP.scala:30:20]
    .io_bundleControlIn_exeType  (_id_io_BundleControl_exeType),	// @[cpu/src/TOP.scala:30:20]
    .io_bundleEXControl_isALUSrc (_controller_io_bundleEXControl_isALUSrc),
    .io_bundleEXControl_exeType  (_controller_io_bundleEXControl_exeType)
  );
  assign io_pc = _pcReg_io_pc;	// @[<stdin>:249:10, cpu/src/TOP.scala:28:23]
  assign io_inst = _instRom_io_inst;	// @[<stdin>:249:10, cpu/src/TOP.scala:29:25]
  assign io_bundleControl_isALUSrc = _id_io_BundleControl_isALUSrc;	// @[<stdin>:249:10, cpu/src/TOP.scala:30:20]
  assign io_bundleControl_isJump = 1'h0;	// @[<stdin>:249:10, cpu/src/TOP.scala:28:23, :30:20, :31:25, :32:20, :33:25, :34:28]
  assign io_bundleControl_isBranch = 1'h0;	// @[<stdin>:249:10, cpu/src/TOP.scala:28:23, :30:20, :31:25, :32:20, :33:25, :34:28]
  assign io_bundleControl_isJAL = 1'h0;	// @[<stdin>:249:10, cpu/src/TOP.scala:28:23, :30:20, :31:25, :32:20, :33:25, :34:28]
  assign io_bundleControl_isLoad = 1'h0;	// @[<stdin>:249:10, cpu/src/TOP.scala:28:23, :30:20, :31:25, :32:20, :33:25, :34:28]
  assign io_bundleControl_isStore = 1'h0;	// @[<stdin>:249:10, cpu/src/TOP.scala:28:23, :30:20, :31:25, :32:20, :33:25, :34:28]
  assign io_bundleControl_isSigned = 1'h0;	// @[<stdin>:249:10, cpu/src/TOP.scala:28:23, :30:20, :31:25, :32:20, :33:25, :34:28]
  assign io_bundleControl_writeEnable = 1'h0;	// @[<stdin>:249:10, cpu/src/TOP.scala:28:23, :30:20, :31:25, :32:20, :33:25, :34:28]
  assign io_bundleControl_lsType = 2'h0;	// @[<stdin>:249:10, cpu/src/TOP.scala:30:20, :33:25, :34:28]
  assign io_bundleControl_exeType = _id_io_BundleControl_exeType;	// @[<stdin>:249:10, cpu/src/TOP.scala:30:20]
  assign io_resEX = _ex_io_res;	// @[<stdin>:249:10, cpu/src/TOP.scala:32:20]
  assign io_rs1 = _gprFile_io_dataRead1;	// @[<stdin>:249:10, cpu/src/TOP.scala:31:25]
  assign io_rs2 = _gprFile_io_dataRead2;	// @[<stdin>:249:10, cpu/src/TOP.scala:31:25]
  assign io_imm = _id_io_imm;	// @[<stdin>:249:10, cpu/src/TOP.scala:30:20]
  assign io_resBranch = 1'h0;	// @[<stdin>:249:10, cpu/src/TOP.scala:28:23, :30:20, :31:25, :32:20, :33:25, :34:28]
endmodule

